# https://gist.github.com/south37/d4a5a8158f49e067237c17d13ecab12a#file-04_nginx-md

worker_processes auto; # コア数と同じ数まで増やすと良いかも

# nginx worker の設定
worker_rlimit_nofile 4096; # worker_connections の 4 倍程度（感覚値）
events {
	worker_connections 1024; # 大きくするなら worker_rlimit_nofile も大きくする（file descriptor数の制限を緩める)
	# multi_accept on; # error が出るリスクあり。defaultはoff。
	# accept_mutex_delay 100ms;
}

http {
	log_format main '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" $request_time'; # kataribe 用の log format
	# access_log /var/log/nginx/access.log main; # これはしばらく on にして、最後に off にすると良さそう。
	access_log off;

	# 基本設定
	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	types_hash_max_size 2048;
	server_tokens off;
	open_file_cache max=100 inactive=20s; # file descriptor のキャッシュ。入れた方が良い。

	# proxy buffer の設定。白金動物園が設定してた。
	proxy_buffers 100 32k;
	proxy_buffer_size 8k;

	# mime.type の設定
	include /etc/nginx/mime.types;

	# Keepalive 設定
	keepalive_timeout 65;
	keepalive_requests 500;

	# Proxy cache 設定。使いどころがあれば。1mでkey8,000個。1gまでcache。
	proxy_cache_path /var/cache/nginx/cache levels=1:2 keys_zone=zone1:1m max_size=1g inactive=1h;
	proxy_temp_path /var/cache/nginx/tmp;
	# オリジンから来るCache-Controlを無視する必要があるなら。。。
	# proxy_ignore_headers Cache-Control;

	# payloadサイズ
	client_max_body_size 64M;

	# 1台用
	upstream app {
		server 127.0.0.1:8000;
		keepalive 60;
	}

	# unix domain socket 設定1
	# upstream app {
	# 	server unix:/run/unicorn.sock; # systemd を使ってると `/tmp` 以下が使えない。appのディレクトリに`tmp`ディレクトリ作って配置する方がpermissionでハマらずに済んで良いかも。
	# }

	# 複数serverへ proxy
	upstream app_login {
		# isu2に多めに振る
		server 127.0.0.1:8000 weight=2;
		server isu2.sysad.net:8000 weight=3;
		keepalive 60;
	}

	server {
		listen 443 ssl http2;

		ssl_certificate /etc/nginx/ssl/fullchain.pem;
		ssl_certificate_key /etc/nginx/ssl/privkey.pem;

		# static file 配信用
		location ~ .*\.(htm|html|css|js|jpg|png|gif|ico)$ {
			root /home/kiritan/public/;

			expires 24h;
			add_header Cache-Control public;

			open_file_cache max=256; # file descriptor などを cache

			# gzip on; # cpu 使うのでメリット・デメリット見極める必要あり。gzip_static 使えるなら事前にgzip圧縮した上でそちらを使う。
			# gzip_types text/css application/javascript application/json application/font-woff application/font-tff image/gif image/png image/jpeg image/svg+xml image/x-icon application/octet-stream;
			# gzip_disable "msie6";
			# gzip_static on; # nginx configure時に --with-http_gzip_static_module 必要
			# gzip_vary on;

			try_files $uri $uri/ @app;
		}

		location / {
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-Host $host;
			proxy_set_header X-Forwarded-Server $host;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

			proxy_pass http://app;
		}
		location /login {
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-Host $host;
			proxy_set_header X-Forwarded-Server $host;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

			proxy_pass http://app_login;
		}

		location @app {
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-Host $host;
			proxy_set_header X-Forwarded-Server $host;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

			proxy_pass http://app;
		}
	}
}
